# Kevin Nguyen
# 996575584
# ECS 124
# 10/13/2014

#PART A
print "\n------- PART A -------\n";
#1.1
print "------- 1.1 -------\n";
print "Welcome to Perl";
print "TATA is a box\n";
print "- Removing the newline meta-char from the first line combines the two lines\n"; 
print "together because there is nothing in between the lines\n\n";   

print "Welcome to Perl";
print "TATA is a box\n";
print "- Removing both newlines is similar to the first,\n"; 
print "but now there is no newline after the 2nd line\n\n";

print "Welcome to Perl";
print "TATA is a box\n";
print "- There is now a newline after the 2nd line\n\n";

print "Welcome\nto\nPerl\n";
print "TATA is a box\n";
print "- Addings newlines will always add a newline anywhere in the string\n\n";

print 'Welcome to Perl\n';
print 'TATA is a box\n';
print "\n- If the string statement is in single quotes, then the \n command is ignored\n\n";

#print Welcome to Perl;
#print TATA is a box\n;
print "- If there is no quotes at all, we get an error on the specific line number\n"; 
print "because there's no package that works with no quotes.\n\n";

#1.2
print "------- 1.2 -------\n";
print "When in double quotes:\n";
print 'Use \\\ to output \\'; 
print "\n";
print 'Use \\t to output tabs';
print "\n\n";


#1.3
print "------- 1.3 -------\n";
$nucstring = 'acCtagGgCCTTAcga';
print "$nucstring \n";
$nucstring =~ tr/tT/uU/;
print "$nucstring \n";

$nucstring =~ tr/uU/tT/;
print "$nucstring \n\n";

#1.5
print "------- 1.5 -------\n";
$proteinstring = 'VRNrIAEelslrrFMVALILdIKrTPgNKPriaemICDIDtYIvEa';
print "$proteinstring \n";
$proteinstring =~ tr/A-Za-z/a-zA-Z/;
print "$proteinstring \n\n";

#1.6
print "------- 1.6 -------\n";
$followingstring = 'SEETQMRLQLKRKLQRNRTSFTQEQIEALEKEFERTHYPDVFARERL';
print "$followingstring \n";
$followingstring =~ tr/ACGPSTWY/A/;
$followingstring =~ tr/RNDQEHK/E/;
$followingstring =~ tr/ILMFV/I/;
print "$followingstring \n\n";

#1.7
print "------- 1.7 -------\n";
print "It would be a better idea to use the d option to delete improper amino acid\n"; 
print "characters because the c option is better for flagging improper amino acid\n"; 
print "characters or for inverting\n\n";

#1.8
print "------- 1.8 -------\n";
$dna = 'ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCC
CCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGC
CTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGG
AAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCC
CTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAG
TTTAATTACAGACCTGAA';
print "$dna\n";
$dna =~ tr/A-Z/a-z/;
$dna =~ tr/atcg/tagc/;
print "$dna\n\n";

#1.9
print "------- 1.9 -------\n";
$purine = 'ACAAGATGCCATTGTCCCCCGGCCTCCTGCTGCTGCTGCTCTCCGGGGCCACGGCCACCGCTGCCCTGCC
CCTGGAGGGTGGCCCCACCGGCCGAGACAGCGAGCATATGCAGGAAGCGGCAGGAATAAGGAAAAGCAGC
CTCCTGACTTTCCTCGCTTGGTGGTTTGAGTGGACCTCCCAGGCCAGTGCCGGGCCCCTCATAGGAGAGG
AAGCTCGGGAGGTGGCCAGGCGGCAGGAAGGCGCACCCCCCCAGCAATCCGCGCGCCGGGACAGAATGCC
CTGCAGGAACTTCTTCTGGAAGACCTTCTCCTCCTGCAAATAAAACCTCACCCATGAATGCTCACGCAAG
TTTAATTACAGACCTGAA';
print "$purine\n";
$count = $purine =~ tr/AG/AG/;
print "$count purines\n";

#PART B
print "\n------- PART B -------\n";
print "1:\n";
print "- NCBI stands for the National Center for Biotechnology Information.\n";
print "The NCBI's mission is to develop new information technologies to\n";
print "understand molecular and genetic processes.\n";
print "- Entrez is the name of NCBI's databases that contains access to nucleotide\n";
print "and protein sequences, genomes, PubMed, etc.\n";
print "- Gene Expression Omnibus (GEO) is a public genomics data storage that supports\n";
print "MIAME-compliant data submissions where tools provide users query and download\n";
print "experiments and profiles.\n";
print "2:\n";
print "- BLAST stands for Basic Local Alignment Search Tool that finds regions of local";
print "similarity between sequences by comparing them to databases and calculate the\n";
print "statistical signifiance of matches and help identify members of gene families.\n";
print "- FASTA is a format that begins with single-line descriptions with a > symbol\n";
print "folowed by lines of sequence data. No blank lines are allowed in FASTA input.\n";
print "- Genebank is a public genetic/DNA sequence database.\n";
print "3:\n";
print "Paper that has the word sequence alignment:\n";
print "A Novel Method for Comparative Analysis of DNA Sequences by Ramanujan-Fourier Transform\n";
print "4:\n";
print "- PubMed is a national library/database of research/scholarly journals.\n";
print "- There are other databases such as Genbank, and MEDLINE that are more specific.";


#PART C
print "\n------- PART C -------\n";
print "# of times ELVIS appears in SWISSPROT : 174 \n";
print "# of times LIVES appears in SWISSPROT : 126 \n";
print "# of times ELVIS and LIVES appears consecutively in SWISSPROT : 0 \n";
print "ELVIS and DEAD don't appear together.\n";
print "# of times PERL appears in SWISSPROT : 3963\n";
print "# of times PERLISGREAT appears in SWISSPROT : 0 \n";
print "# of times ELVIS appears in SWISSPROT : 174 \n";
print "If any of these longer statements appear in thet protein files, it would make it significant.\n";

#PART D
print "\n------- PART D -------\n";

print "B represents as a low quality value that indicates that a specific potion of the read should not be used in further analysis.\n"; 
print "B was also observed to represent as an unknown quality score.\n";

$prob = 10^(-2/10);

print "Probability that a nucleobase read at a position marked with B is incorrect:\n"; 
#print "$prob%";
print "10%\n";


#FASTQ -> FASTA
open IN, 'sample.fastq';
open OUT, ">sample.fasta";
while ($line1 = <IN>){
	$line1 =~ tr/@/>/;
	$line1 =~ tr/B//d;	
	$line2 = <IN>;
	$line2 =~ tr/@/>/;
	$line2 =~ tr/B//d;
	$line3 = <IN>;
	$line3 =~ tr/@/>/;
	$line3 =~ tr/B//d;
	$line4 = <IN>;
	$line4 =~ tr/@/>/;
	$line4 =~ tr/B//d;
	#print "$line1$line2";
	print OUT "$line1$line2";
}

close (IN);
close (OUT);

print "sample.fastq file is converted to sample.fasta !\n";

#FASTA -> FASTQ
open IN, 'sample.fasta';
open OUT, ">sample_a_to_q.fastq";
while ($line1 = <IN>){
	$line1 =~ tr/>/@/;
	$line2 = <IN>;
	$length = length($line2) - 1;
	$line3 = <IN>;
	$line3 =~ tr/>/+/;
	$line4 = <IN>;
	print OUT "$line1$line2";
	print OUT "$line3";
	print OUT 'B' x $length;
	print OUT "\n";
}

close (IN);
close (OUT);

print "sample.fasta file is converted to sample_a_to_q.fastq !\n";